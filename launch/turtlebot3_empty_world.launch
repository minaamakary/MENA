<launch>
  <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="/home/minamakary/ros/catkin_ws/src/thesis/worlds/maze_world_c.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find thesis)/urdf/turtlebot3_$(arg model).urdf.xacro" />

  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_$(arg model) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />
  
  <!-- Start robot_state_publisher to publish the transforms -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen" />

  <!-- Statements for mapping -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_base_link" args="0 0 0 0 0 0 map base_link 100" />  -->
  <!-- <node pkg="thesis" type="mappingRoom.py" name="room_mapper_node" output="screen" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_lidar" args="0 0 0 0 0 0 base_link velodyne 100" /> -->
 
  <!-- Launch the nodes (movement and mapping) -->
  <!-- <node pkg="thesis" type="publish_pcd.py" name="pcd_publisher" output="screen"/> -->
   <node pkg="thesis" type="turtle_move_laserscan.py" name="turtle_move" output="screen"/>
   <node pkg="thesis" type="pose_orientation_node.py" name="pose_orientation" output="screen"/> 
   <node pkg="thesis" type="distance_measurement_node.py" name="distance_measurement" output="screen"/> 
   <!-- <node pkg="thesis" type="mappingRoom.py" name="mapping_room" output="screen"/> -->


  <!-- Launch RViz -->
 <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find thesis)/rviz/pointcloud_mapping.rviz"/> -->
</launch>
